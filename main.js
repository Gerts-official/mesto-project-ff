(()=>{"use strict";var __webpack_modules__={169:()=>{eval('\n;// CONCATENATED MODULE: ./src/scripts/api.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n// API CONSTANTS\nvar BASE_URL = \'https://nomoreparties.co/v1/wff-cohort-13\';\nvar AUTHORIZATION_KEY = \'70d4b308-094b-447b-90dc-851238a69354\';\n\n// Helper function to handle responses\nvar handleResponse = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {\n    var errorData;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (response.ok) {\n            _context.next = 5;\n            break;\n          }\n          _context.next = 3;\n          return response.json();\n        case 3:\n          errorData = _context.sent;\n          throw new Error(errorData.message || \'Something went wrong\');\n        case 5:\n          return _context.abrupt("return", response.json());\n        case 6:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function handleResponse(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n// Helper function to make API calls\nvar makeRequest = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(uri) {\n    var method,\n      data,\n      options,\n      response,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          method = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : "GET";\n          data = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : null;\n          options = {\n            method: method,\n            headers: {\n              \'Authorization\': AUTHORIZATION_KEY,\n              \'Content-Type\': \'application/json\'\n            }\n          };\n          if (data) {\n            options.body = JSON.stringify(data);\n          }\n          _context2.prev = 4;\n          _context2.next = 7;\n          return fetch("".concat(BASE_URL, "/").concat(uri), options);\n        case 7:\n          response = _context2.sent;\n          _context2.next = 10;\n          return handleResponse(response);\n        case 10:\n          return _context2.abrupt("return", _context2.sent);\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2["catch"](4);\n          console.error("".concat(method, " request failed:"), _context2.t0);\n          throw _context2.t0;\n        case 17:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[4, 13]]);\n  }));\n  return function makeRequest(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n//  ==================================================================================== API METHODS\n// Get the user\'s data from the server\nvar getUserData = function getUserData() {\n  return makeRequest(\'users/me\');\n};\n\n// Get the initial set of cards from the server\nvar getInitialCardsToLoad = function getInitialCardsToLoad() {\n  return makeRequest(\'cards\');\n};\n\n// Send the user\'s profile data to the server\nvar patchChangedProfileData = function patchChangedProfileData(name, about) {\n  return makeRequest(\'users/me\', \'PATCH\', {\n    name: name,\n    about: about\n  });\n};\n\n// Send a new card to the server\nvar postNewCard = function postNewCard(name, link) {\n  return makeRequest(\'cards\', \'POST\', {\n    name: name,\n    link: link\n  });\n};\n\n// Delete a card from the server\nvar deleteFromTheServer = function deleteFromTheServer(id) {\n  return makeRequest("cards/".concat(id), \'DELETE\');\n};\n\n// Adds a like to a card on the server\nvar patchNewLike = function patchNewLike(cardID, likes) {\n  return makeRequest("cards/likes/".concat(cardID), \'PUT\', {\n    likes: likes\n  });\n};\n\n// Removes a like from a card on the server\nvar deleteLike = function deleteLike(cardID) {\n  return makeRequest("cards/likes/".concat(cardID), \'DELETE\');\n};\n\n// Send new avatar to the server \nvar patchChangeUserAvatar = function patchChangeUserAvatar(avatar) {\n  return makeRequest(\'users/me/avatar\', \'PATCH\', {\n    avatar: avatar\n  });\n};\n;// CONCATENATED MODULE: ./src/scripts/modal.js\n// Opens the specified popup and activates the closing event listeners\nfunction openPopup(popupElement) {\n  popupElement.classList.add(\'popup_is-opened\');\n  activateClosingEventListeners();\n}\n\n// Closes the specified popup and deactivates the closing event listeners.\nfunction closePopup(popupElement) {\n  popupElement.classList.remove(\'popup_is-opened\');\n  deactivateClosingEventListeners();\n}\n\n// Handles the click event on the close button of a popup.\nfunction handlePopupCloseButtonClick(evt) {\n  if (evt.target.classList.contains(\'popup__close\')) {\n    closePopup(evt.target.closest(\'.popup\'));\n  }\n}\n\n// Handles the keydown event for the Escape key \nfunction handleEscClose(evt) {\n  if (evt.key === \'Escape\') {\n    closePopup(document.querySelector(\'.popup_is-opened\'));\n  }\n}\n\n// Handles the click event on the overlay of a popup\nfunction handleOverlayClose(evt) {\n  if (evt.target.classList.contains("popup")) {\n    closePopup(evt.target);\n  }\n}\n;\n\n// Activates the closing event listeners for popups\nfunction activateClosingEventListeners() {\n  document.addEventListener(\'click\', handlePopupCloseButtonClick);\n  document.addEventListener(\'keydown\', handleEscClose);\n  document.addEventListener(\'click\', handleOverlayClose);\n}\n\n// Deactivates the closing event listeners for popups\nfunction deactivateClosingEventListeners() {\n  document.removeEventListener(\'click\', handlePopupCloseButtonClick);\n  document.removeEventListener(\'keydown\', handleEscClose);\n  document.removeEventListener(\'click\', handleOverlayClose);\n}\n;// CONCATENATED MODULE: ./src/scripts/utils/constants.js\n// *** VALIDATION CONFIG ***\nvar validationConfig = {\n  formSelector: \'.popup__form\',\n  inputSelector: \'.popup__input\',\n  submitButtonSelector: \'.popup__button\',\n  inactiveButtonClass: \'popup__button_disabled\',\n  inputErrorClass: \'popup__input_type_error\',\n  errorClass: \'popup__error_visible\'\n};\n\n// DOM nodes \n// Popups\nvar NewCardPopup = document.querySelector(\'.popup_type_new-card\');\nvar EditProfilePopup = document.querySelector(\'.popup_type_edit\');\nvar NewAvatarPopup = document.querySelector(\'.popup_type_new-avatar\');\nvar deleteCardPopup = document.querySelector(\'.popup_type_delete\');\n\n// Forms\nvar newCardForm = document.forms[\'new-place\'];\nvar editProfileForm = document.forms[\'edit-profile\'];\nvar newAvatarForm = document.forms[\'new-avatar\'];\nvar deleteCardForm = document.forms[\'confirm-delete\'];\n\n// Elements\nvar cardList = document.querySelector(\'.places__list\');\nvar profileName = document.querySelector(\'.profile__title\');\nvar profileJob = document.querySelector(\'.profile__description\');\nvar profileImage = document.querySelector(\'.profile__image\');\nvar inputEditProfileName = EditProfilePopup.querySelector(\'.popup__input_type_name\');\nvar inputEditProfileJob = EditProfilePopup.querySelector(\'.popup__input_type_description\');\nvar inputNewCardName = NewCardPopup.querySelector(\'.popup__input_type_card-name\');\nvar inputNewCardLink = NewCardPopup.querySelector(\'.popup__input_type_url\');\nvar inputNewAvatarLink = NewAvatarPopup.querySelector(\'.popup__input_type_url\');\nvar deleteCardSubmitButton = deleteCardForm.querySelector(\'.popup__button\');\n\n;// CONCATENATED MODULE: ./src/scripts/card.js\nfunction card_typeof(o) { "@babel/helpers - typeof"; return card_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, card_typeof(o); }\nfunction card_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ card_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == card_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(card_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction card_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction card_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { card_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { card_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\n// DOM and GLOBAL variables\nvar cardTemplate = document.querySelector(\'#card-template\');\nvar selectedCardGlobal = {};\n\n//  ===================================================================================================== SUB-FUNCTIONS\n// Populates the card element with data from the provided cardData object.\nfunction setupCardData(cardElement, cardData) {\n  var cardDataToPut = {\n    name: cardElement.querySelector(\'.card__title\'),\n    link: cardElement.querySelector(\'.card__image\'),\n    altText: cardElement.querySelector(\'.card__image\'),\n    likeCount: cardElement.querySelector(\'.card__like-button-span\'),\n    likeButton: cardElement.querySelector(\'.card__like-button\'),\n    deleteButton: cardElement.querySelector(\'.card__delete-button\')\n  };\n  cardDataToPut.name.textContent = cardData.name;\n  cardDataToPut.link.src = cardData.link;\n  cardDataToPut.altText.alt = \'На картинке изображено: \' + cardData.name;\n  cardDataToPut.likeCount.textContent = Array.isArray(cardData.likes) ? cardData.likes.length : 0;\n  return cardDataToPut;\n}\n\n// Attaches event listeners to the card element for delete, like, and open actions.\nfunction attachEventListeners(cardElement, cardData, cardDataToPut, openDeletePopup, likeCardCallback, openCardCallback, profileData) {\n  // Attach an event listener to the card deletion button.\n  cardDataToPut.deleteButton.addEventListener(\'click\', function () {\n    return openDeletePopup(cardElement, cardData._id);\n  });\n\n  // Attach an event listener to the card like button.\n  cardDataToPut.likeButton.addEventListener(\'click\', function () {\n    return likeCardCallback(cardDataToPut.likeButton, cardData, profileData);\n  });\n\n  // Attach an event listener to the card magnifier\n  cardDataToPut.link.addEventListener(\'click\', function () {\n    return openCardCallback(cardDataToPut.name, cardDataToPut.link);\n  });\n}\n\n// Updates the like button state based on whether the current user has liked the card or not.\nfunction updateLikeButtonState(cardElement, cardData, profileData, cardDataToPut) {\n  // Check if the card is liked by the current user\n  var isLikedByCurrentUser = cardData.likes && Array.isArray(cardData.likes) ? cardData.likes.some(function (like) {\n    return like._id === profileData._id;\n  }) : false;\n\n  // Update the like button state based on the check\n  if (isLikedByCurrentUser) {\n    cardDataToPut.likeButton.classList.add(\'card__like-button_is-active\');\n  } else {\n    cardDataToPut.likeButton.classList.remove(\'card__like-button_is-active\');\n  }\n}\n\n// Hides the delete button on the card if the current user is not the owner of the card\nfunction hideDeleteButton(card, cardData, ID, cardDataToPut) {\n  if (cardData.owner._id !== ID) {\n    cardDataToPut.deleteButton.classList.add(\'card__delete-button-inactive\');\n  }\n}\nfunction openDeletePopup(cardElement, id) {\n  openPopup(deleteCardPopup);\n  deleteCardSubmitButton.focus();\n  selectedCardGlobal.id = id;\n  selectedCardGlobal.element = cardElement;\n}\n\n// Toggles the like state of a card for the current user.\nfunction likeCard(_x, _x2, _x3) {\n  return _likeCard.apply(this, arguments);\n}\n\n// function to update likes state\nfunction _likeCard() {\n  _likeCard = card_asyncToGenerator( /*#__PURE__*/card_regeneratorRuntime().mark(function _callee(likeButton, cardData, currentUser) {\n    var updatedCardData, isLiked;\n    return card_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // Check if the card is liked by the current user\n          isLiked = cardData.likes.some(function (like) {\n            return like._id === currentUser._id;\n          });\n          if (!isLiked) {\n            _context.next = 8;\n            break;\n          }\n          _context.next = 5;\n          return deleteLike(cardData._id);\n        case 5:\n          updatedCardData = _context.sent;\n          _context.next = 11;\n          break;\n        case 8:\n          _context.next = 10;\n          return patchNewLike(cardData._id);\n        case 10:\n          updatedCardData = _context.sent;\n        case 11:\n          // Update the card data with the new like information from the server\n          cardData.likes = updatedCardData.likes;\n\n          // Update the visual representation of the like button and like count\n          updateLikeVisuals(likeButton, cardData.likes.length, isLiked);\n          _context.next = 19;\n          break;\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context["catch"](0);\n          console.error(\'Error toggling like:\', _context.t0);\n          throw _context.t0;\n        case 19:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 15]]);\n  }));\n  return _likeCard.apply(this, arguments);\n}\nfunction updateLikeVisuals(likeButton, likeCount, isLiked) {\n  var likeCountElement = likeButton.nextElementSibling;\n  likeCountElement.textContent = likeCount;\n  likeButton.classList.toggle(\'card__like-button_is-active\', !isLiked);\n}\n\n//=========================================================================================== MAIN createCard function\n\nfunction createCard(cardData, openDeletePopupCallback, likeCardCallback, openCardCallback, profileData) {\n  var cardContent = cardTemplate.content.cloneNode(true);\n  var cardElement = cardContent.querySelector(\'.places__item\');\n  var cardDataToPut = setupCardData(cardElement, cardData);\n  hideDeleteButton(cardElement, cardData, profileData._id, cardDataToPut);\n\n  // Attach event listeners\n  attachEventListeners(cardElement, cardData, cardDataToPut, openDeletePopupCallback, likeCardCallback, openCardCallback, profileData);\n\n  // Update the like button state\n  updateLikeButtonState(cardElement, cardData, profileData, cardDataToPut);\n  return cardElement;\n}\n;// CONCATENATED MODULE: ./src/scripts/validation.js\nfunction validation_typeof(o) { "@babel/helpers - typeof"; return validation_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, validation_typeof(o); }\nfunction validation_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ validation_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == validation_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(validation_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction validation_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction validation_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { validation_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { validation_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n// ============================================================================================= HELPER FUNCTIONS \n\n// The function checks if all the inputs are valid. Returns true if any of the fields are false.\nvar hasInvalidInput = function hasInvalidInput(inputList) {\n  return inputList.some(function (input) {\n    return !input.validity.valid;\n  });\n};\n\n// Function to validate all the inputs\nvar isValid = function isValid(formElement, inputElement, config) {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity("");\n  }\n  ;\n  return inputElement.validity.valid;\n};\n\n// Checks if the image can be loaded\nfunction checkImage(url) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload = function () {\n      if (this.width > 0) {\n        resolve(true);\n      }\n    };\n    image.onerror = function () {\n      resolve(false);\n    };\n    image.src = url;\n  });\n}\n;\n\n// Function to validate images\nfunction validateImage(_x) {\n  return _validateImage.apply(this, arguments);\n}\nfunction _validateImage() {\n  _validateImage = validation_asyncToGenerator( /*#__PURE__*/validation_regeneratorRuntime().mark(function _callee(url) {\n    var imageExists;\n    return validation_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return checkImage(url);\n        case 3:\n          imageExists = _context.sent;\n          if (imageExists) {\n            _context.next = 6;\n            break;\n          }\n          throw new Error(\'Изображение не существует или не может быть загружено. Пожалуйста проверьте ссылку\');\n        case 6:\n          _context.next = 12;\n          break;\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context["catch"](0);\n          console.error(\'Failed to update profile:\', _context.t0);\n          throw _context.t0;\n        case 12:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n  return _validateImage.apply(this, arguments);\n}\nfunction disableButton(buttonElement, config) {\n  buttonElement.classList.add(config.inactiveButtonClass);\n  buttonElement.disabled = true;\n}\nfunction enableButton(buttonElement, config) {\n  buttonElement.classList.remove(config.inactiveButtonClass);\n  buttonElement.disabled = false;\n}\n\n// Button State Management Function\nvar toggleButtonState = function toggleButtonState(inputList, buttonElement, config) {\n  if (hasInvalidInput(inputList)) {\n    disableButton(buttonElement, config);\n  } else {\n    enableButton(buttonElement, config);\n  }\n};\n\n// Function for preventing invalid form submission\nvar preventInvalidFormSubmission = function preventInvalidFormSubmission(formElement, event) {\n  if (!formElement.checkValidity()) {\n    event.preventDefault();\n  }\n};\n\n// ======================================================================================== SHOW/HIDE ERROR FUNCTIONS\n\n// Function to show the error \nvar showInputError = function showInputError(formElement, inputElement, errorMessage, config) {\n  var errorElement = formElement.querySelector(".".concat(inputElement.id, "-error"));\n  inputElement.classList.add(config.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(config.errorClass);\n};\n\n// Function to hide the error \nvar hideInputError = function hideInputError(formElement, inputElement, config) {\n  var errorElement = formElement.querySelector(".".concat(inputElement.id, "-error"));\n  inputElement.classList.remove(config.inputErrorClass);\n  errorElement.classList.remove(config.errorClass);\n  errorElement.textContent = \'\';\n};\n\n// ======================================================================================== MAIN VALIDATION FUNCTIONS\n\n// Enable input validation on input level.\nvar setEventListeners = function setEventListeners(formElement, config) {\n  var inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\n  var buttonElement = formElement.querySelector(config.submitButtonSelector);\n  toggleButtonState(inputList, buttonElement, config);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener(\'input\', function () {\n      var isValidInput = isValid(formElement, inputElement, config);\n      if (!isValidInput) {\n        showInputError(formElement, inputElement, inputElement.validationMessage, config);\n      } else {\n        hideInputError(formElement, inputElement, config);\n      }\n      toggleButtonState(inputList, buttonElement, config);\n    });\n  });\n};\n\n// Enable validation on form level.\nvar enableValidation = function enableValidation(config) {\n  var formList = Array.from(document.querySelectorAll(config.formSelector));\n\n  // Prevent page reload in the submit event.\n  formList.forEach(function (formElement) {\n    formElement.addEventListener(\'submit\', function (evt) {\n      evt.preventDefault();\n    });\n    setEventListeners(formElement, config);\n  });\n};\n\n// Clear up the error message from the previous session function.\nvar clearValidation = function clearValidation(profileForm, config) {\n  var inputList = Array.from(profileForm.querySelectorAll(config.inputSelector));\n  var buttonElement = profileForm.querySelector(config.submitButtonSelector);\n  disableButton(buttonElement, config);\n  inputList.forEach(function (inputElement) {\n    hideInputError(profileForm, inputElement, config);\n  });\n};\n;// CONCATENATED MODULE: ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction src_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction src_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { src_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { src_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n// ========================================================================================================= HEADER ZONE  \n// Import SECTION\n\n\n\n\n\n\n\n// GLOBAL \nvar profileDataGlobal;\n\n// ========================================================================================================= MAIN ZONE \n// Load website\'s data from the server\nsrc_asyncToGenerator( /*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n  var _yield$Promise$all, _yield$Promise$all2, profileData, cardsData, _iterator, _step, newCardData, card;\n  return src_regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        _context.next = 3;\n        return Promise.all([getUserData(), getInitialCardsToLoad()]);\n      case 3:\n        _yield$Promise$all = _context.sent;\n        _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n        profileData = _yield$Promise$all2[0];\n        cardsData = _yield$Promise$all2[1];\n        profileDataGlobal = profileData;\n        profileName.textContent = profileData.name;\n        profileJob.textContent = profileData.about;\n        profileImage.style.backgroundImage = "url(\'".concat(profileData.avatar, "\')");\n        _iterator = _createForOfIteratorHelper(cardsData);\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            newCardData = _step.value;\n            card = createCard(newCardData, openDeletePopup, likeCard, openScalePopup, profileDataGlobal);\n            cardList.append(card);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        _context.next = 18;\n        break;\n      case 15:\n        _context.prev = 15;\n        _context.t0 = _context["catch"](0);\n        console.error(\'Failed to load website data:\', _context.t0);\n      case 18:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee, null, [[0, 15]]);\n}))();\n\n// Handler function to OPEN profile edit form\nfunction openProfilePopup() {\n  inputEditProfileName.value = profileName.textContent;\n  inputEditProfileJob.value = profileJob.textContent;\n  openPopup(EditProfilePopup);\n  clearValidation(EditProfilePopup, validationConfig);\n}\n// Handler function to SUBMIT edit profile form\nfunction updateProfileSubmit(_x) {\n  return _updateProfileSubmit.apply(this, arguments);\n} // Handler function to OPEN a new card form\nfunction _updateProfileSubmit() {\n  _updateProfileSubmit = src_asyncToGenerator( /*#__PURE__*/src_regeneratorRuntime().mark(function _callee2(evt) {\n    var submitButton, originalButtonText, newName, newAbout;\n    return src_regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          evt.preventDefault();\n          submitButton = evt.submitter;\n          originalButtonText = submitButton.textContent;\n          submitButton.textContent = \'Сохранение...\';\n          newName = inputEditProfileName.value;\n          newAbout = inputEditProfileJob.value;\n          _context2.prev = 6;\n          _context2.next = 9;\n          return patchChangedProfileData(newName, newAbout);\n        case 9:\n          profileName.textContent = newName;\n          profileJob.textContent = newAbout;\n          closePopup(EditProfilePopup);\n          _context2.next = 18;\n          break;\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2["catch"](6);\n          console.error(\'Failed to update profile:\', _context2.t0);\n          throw _context2.t0;\n        case 18:\n          _context2.prev = 18;\n          submitButton.textContent = originalButtonText;\n          return _context2.finish(18);\n        case 21:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[6, 14, 18, 21]]);\n  }));\n  return _updateProfileSubmit.apply(this, arguments);\n}\nfunction openNewCardPopup() {\n  newCardForm.reset();\n  openPopup(NewCardPopup);\n  clearValidation(NewCardPopup, validationConfig);\n  inputNewCardName.focus();\n}\n// Function to SUBMIT a new card creation \nfunction addNewCardSubmit(_x2) {\n  return _addNewCardSubmit.apply(this, arguments);\n} // Handler function to OPEN a change avatar form\nfunction _addNewCardSubmit() {\n  _addNewCardSubmit = src_asyncToGenerator( /*#__PURE__*/src_regeneratorRuntime().mark(function _callee3(evt) {\n    var newCardName, newCardLink, submitButton, originalButtonText, newCardData, newCardElement;\n    return src_regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          evt.preventDefault();\n          newCardName = inputNewCardName.value;\n          newCardLink = inputNewCardLink.value;\n          submitButton = evt.submitter;\n          originalButtonText = submitButton.textContent;\n          submitButton.textContent = \'Сохранение...\';\n          _context3.prev = 6;\n          _context3.next = 9;\n          return validateImage(newCardLink);\n        case 9:\n          _context3.next = 11;\n          return postNewCard(newCardName, newCardLink);\n        case 11:\n          newCardData = _context3.sent;\n          newCardData.likes = newCardData.likes || [];\n          newCardElement = createCard(newCardData, openDeletePopup, likeCard, openScalePopup, profileDataGlobal);\n          cardList.prepend(newCardElement);\n          closePopup(NewCardPopup);\n          _context3.next = 22;\n          break;\n        case 18:\n          _context3.prev = 18;\n          _context3.t0 = _context3["catch"](6);\n          console.error(\'Failed to add card:\', _context3.t0);\n          showInputError(NewCardPopup, inputNewAvatarLink, _context3.t0.message, validationConfig);\n        case 22:\n          _context3.prev = 22;\n          submitButton.textContent = originalButtonText;\n          return _context3.finish(22);\n        case 25:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[6, 18, 22, 25]]);\n  }));\n  return _addNewCardSubmit.apply(this, arguments);\n}\nfunction openAvatarPopup() {\n  newAvatarForm.reset();\n  openPopup(NewAvatarPopup);\n  clearValidation(NewAvatarPopup, validationConfig);\n  inputNewAvatarLink.focus();\n}\n// Function to SUBMIT the changing of profile\'s avatar\nfunction updateAvatarSubmit(_x3) {\n  return _updateAvatarSubmit.apply(this, arguments);\n} // Handler function to OPEN an image popup by click\nfunction _updateAvatarSubmit() {\n  _updateAvatarSubmit = src_asyncToGenerator( /*#__PURE__*/src_regeneratorRuntime().mark(function _callee4(evt) {\n    var submitButton, originalButtonText, newAvatarLink;\n    return src_regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          evt.preventDefault();\n          submitButton = evt.submitter;\n          originalButtonText = submitButton.textContent;\n          submitButton.textContent = \'Сохранение...\';\n          newAvatarLink = inputNewAvatarLink.value;\n          _context4.prev = 5;\n          _context4.next = 8;\n          return validateImage(newAvatarLink);\n        case 8:\n          _context4.next = 10;\n          return patchChangeUserAvatar(newAvatarLink);\n        case 10:\n          profileImage.style.backgroundImage = "url(\'".concat(newAvatarLink, "\')");\n          closePopup(NewAvatarPopup);\n          _context4.next = 18;\n          break;\n        case 14:\n          _context4.prev = 14;\n          _context4.t0 = _context4["catch"](5);\n          console.error("Failed to update avatar:", _context4.t0);\n          showInputError(NewAvatarPopup, inputNewAvatarLink, _context4.t0.message, validationConfig);\n        case 18:\n          _context4.prev = 18;\n          submitButton.textContent = originalButtonText;\n          return _context4.finish(18);\n        case 21:\n        case "end":\n          return _context4.stop();\n      }\n    }, _callee4, null, [[5, 14, 18, 21]]);\n  }));\n  return _updateAvatarSubmit.apply(this, arguments);\n}\nfunction openScalePopup(name, link) {\n  var scalePopup = document.querySelector(\'.popup_type_image\');\n  openPopup(scalePopup);\n  var popupImageLink = scalePopup.querySelector(\'.popup__image\');\n  var popupImageCaption = scalePopup.querySelector(\'.popup__caption\');\n  popupImageLink.src = link.src;\n  popupImageCaption.textContent = name.textContent;\n  activateClosingEventListeners();\n}\n\n// Function to SUBMIT the deletion of a card\nfunction deleteCardConfirmed(_x4) {\n  return _deleteCardConfirmed.apply(this, arguments);\n} // ============================================================================================= EVENT LISTENERS ZONE \n// Event listener to OPEN the profile editing form\nfunction _deleteCardConfirmed() {\n  _deleteCardConfirmed = src_asyncToGenerator( /*#__PURE__*/src_regeneratorRuntime().mark(function _callee5(evt) {\n    var submitButton, originalButtonText;\n    return src_regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          submitButton = evt.submitter;\n          originalButtonText = submitButton.textContent;\n          submitButton.textContent = \'Удаление...\';\n          _context5.prev = 3;\n          _context5.next = 6;\n          return deleteFromTheServer(selectedCardGlobal.id);\n        case 6:\n          selectedCardGlobal.element.remove();\n          closePopup(deleteCardPopup);\n          _context5.next = 14;\n          break;\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5["catch"](3);\n          console.error(\'Ошибка при удалении карточки:\', _context5.t0);\n          throw _context5.t0;\n        case 14:\n          _context5.prev = 14;\n          submitButton.textContent = originalButtonText;\n          return _context5.finish(14);\n        case 17:\n        case "end":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[3, 10, 14, 17]]);\n  }));\n  return _deleteCardConfirmed.apply(this, arguments);\n}\ndocument.querySelector(\'.profile__edit-button\').addEventListener(\'click\', openProfilePopup);\n// Event listener to SUBMIT profile editing form\nEditProfilePopup.addEventListener(\'submit\', updateProfileSubmit);\n\n// Event listener to OPEN the add new card form \ndocument.querySelector(\'.profile__add-button\').addEventListener(\'click\', openNewCardPopup);\n// Event listener to SUBMIT the add new card form\nnewCardForm.addEventListener(\'submit\', addNewCardSubmit);\n\n// Event listener to OPEN the profile changing avatar form\nprofileImage.addEventListener(\'click\', openAvatarPopup);\n// // Event listener to SUBMIT the profile changing avatar form\nnewAvatarForm.addEventListener(\'submit\', updateAvatarSubmit);\n\n// Event listener to SUBMIT card deletion \ndeleteCardForm.addEventListener(\'submit\', deleteCardConfirmed);\n\n// Enable validation\nenableValidation(validationConfig);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///169\n')}},__webpack_exports__={};__webpack_modules__[169]()})();